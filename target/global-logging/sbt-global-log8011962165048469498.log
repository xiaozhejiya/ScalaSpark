[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.3 (Oracle Corporation Java 1.8.0_241)
[debug]       Load.loadUnit: plugins took 74.9415ms
[debug]       Load.loadUnit: defsScala took 0.3588ms
[debug] [Loading] Scanning directory C:\Users\30778\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\30778\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 20.6937 ms
[debug]           Load.resolveProject(global-plugins) took 42.1192ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\30778\.sbt\1.0\plugins, plugins: List(<none>))) took 85.374ms
[debug] [Loading] Done in C:\Users\30778\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 111.8797ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2422ms
[debug]     Load.loadUnit(file:/C:/Users/30778/.sbt/1.0/plugins/, ...) took 194.7371ms
[debug]   Load.apply: load took 332.086ms
[debug]   Load.apply: resolveProjects took 5.3958ms
[debug]   Load.apply: finalTransforms took 50.9162ms
[debug]   Load.apply: config.delegates took 7.3805ms
[debug]   Load.apply: Def.make(settings)... took 708.9338ms
[debug]   Load.apply: structureIndex took 95.5371ms
[debug]   Load.apply: mkStreams took 2.1981ms
[info] loading global plugins from C:\Users\30778\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2660.6461ms
[debug]           Load.loadUnit: plugins took 30.529ms
[debug]           Load.loadUnit: defsScala took 0.0069ms
[debug] [Loading] Scanning directory E:\Spark_Core_main\project
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\Spark_Core_main\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.2487 ms
[debug]               Load.resolveProject(spark_core_main-build) took 1.1923ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark_core_main-build, base: E:\Spark_Core_main\project, plugins: List(<none>))) took 4.04ms
[debug] [Loading] Done in E:\Spark_Core_main\project, returning: (spark_core_main-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 5.5826ms
[debug]           Load.loadUnit: cleanEvalClasses took 0.0215ms
[debug]         Load.loadUnit(file:/E:/Spark_Core_main/project/, ...) took 37.8963ms
[debug]       Load.apply: load took 39.1181ms
[debug]       Load.apply: resolveProjects took 0.0953ms
[debug]       Load.apply: finalTransforms took 7.7021ms
[debug]       Load.apply: config.delegates took 0.7148ms
[debug]       Load.apply: Def.make(settings)... took 145.2304ms
[debug]       Load.apply: structureIndex took 26.5804ms
[debug]       Load.apply: mkStreams took 0.0031ms
[info] loading project definition from E:\Spark_Core_main\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 17112.2468ms
[debug]     Load.loadUnit: defsScala took 0.004ms
[debug] [Loading] Scanning directory E:\Spark_Core_main
[debug]       Load.loadUnit: mkEval took 4.4805ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\Spark_Core_main, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.6678 ms
[info] loading settings for project spark_core_main from build.sbt ...
[debug]         Load.resolveProject(spark_core_main) took 1.8384ms
[debug]       Load.loadTransitive: finalizeProject(Project(id spark_core_main, base: E:\Spark_Core_main, plugins: List(<none>))) took 3.8541ms
[debug] [Loading] Done in E:\Spark_Core_main, returning: (spark_core_main)
[debug]     Load.loadUnit: loadedProjectsRaw took 1467.939ms
[debug]     Load.loadUnit: cleanEvalClasses took 19.3636ms
[debug]   Load.loadUnit(file:/E:/Spark_Core_main/, ...) took 18600.265ms
[debug] Load.apply: load took 18601.7526ms
[debug] Load.apply: resolveProjects took 0.1154ms
[debug] Load.apply: finalTransforms took 3.5571ms
[debug] Load.apply: config.delegates took 0.2757ms
[debug] Load.apply: Def.make(settings)... took 63.7926ms
[debug] Load.apply: structureIndex took 18.1914ms
[debug] Load.apply: mkStreams took 0.0019ms
[info] set current project to Spark.Partitioner (in build file:/E:/Spark_Core_main/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(shell, None, None)
[info] sbt server started at local:sbt-server-cb78d90bead6482d1349
[info] started sbt server
