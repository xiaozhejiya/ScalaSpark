[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.3 (Oracle Corporation Java 1.8.0_241)
[debug]       Load.loadUnit: plugins took 194.2304ms
[debug]       Load.loadUnit: defsScala took 0.182ms
[debug] [Loading] Scanning directory C:\Users\30778\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\30778\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 12.1845 ms
[debug]           Load.resolveProject(global-plugins) took 29.3998ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\30778\.sbt\1.0\plugins, plugins: List(<none>))) took 57.0202ms
[debug] [Loading] Done in C:\Users\30778\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 73.8017ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2755ms
[debug]     Load.loadUnit(file:/C:/Users/30778/.sbt/1.0/plugins/, ...) took 273.1333ms
[debug]   Load.apply: load took 388.6546ms
[debug]   Load.apply: resolveProjects took 3.6851ms
[debug]   Load.apply: finalTransforms took 78.356ms
[debug]   Load.apply: config.delegates took 5.2771ms
[debug]   Load.apply: Def.make(settings)... took 635.3314ms
[debug]   Load.apply: structureIndex took 79.5238ms
[debug]   Load.apply: mkStreams took 1.089ms
[info] loading global plugins from C:\Users\30778\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2206.813ms
[debug]           Load.loadUnit: plugins took 15.1336ms
[debug]           Load.loadUnit: defsScala took 0.002ms
[debug] [Loading] Scanning directory E:\Spark_Core_main\project
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\Spark_Core_main\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.6463 ms
[debug]               Load.resolveProject(spark_core_main-build) took 0.7814ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark_core_main-build, base: E:\Spark_Core_main\project, plugins: List(<none>))) took 2.7582ms
[debug] [Loading] Done in E:\Spark_Core_main\project, returning: (spark_core_main-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3.8754ms
[debug]           Load.loadUnit: cleanEvalClasses took 0.0069ms
[debug]         Load.loadUnit(file:/E:/Spark_Core_main/project/, ...) took 19.422ms
[debug]       Load.apply: load took 20.0072ms
[debug]       Load.apply: resolveProjects took 0.0724ms
[debug]       Load.apply: finalTransforms took 4.4825ms
[debug]       Load.apply: config.delegates took 0.204ms
[debug]       Load.apply: Def.make(settings)... took 76.1084ms
[debug]       Load.apply: structureIndex took 21.5722ms
[debug]       Load.apply: mkStreams took 0.0023ms
[info] loading project definition from E:\Spark_Core_main\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 340.4327ms
[debug]     Load.loadUnit: defsScala took 0.004ms
[debug] [Loading] Scanning directory E:\Spark_Core_main
[debug]       Load.loadUnit: mkEval took 4.1896ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\Spark_Core_main, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.4698 ms
[info] loading settings for project spark_core_main from build.sbt ...
[debug]         Load.resolveProject(spark_core_main) took 1.8173ms
[debug]       Load.loadTransitive: finalizeProject(Project(id spark_core_main, base: E:\Spark_Core_main, plugins: List(<none>))) took 3.7092ms
[debug] [Loading] Done in E:\Spark_Core_main, returning: (spark_core_main)
[debug]     Load.loadUnit: loadedProjectsRaw took 92.6144ms
[debug]     Load.loadUnit: cleanEvalClasses took 11.6387ms
[debug]   Load.loadUnit(file:/E:/Spark_Core_main/, ...) took 445.5014ms
[debug] Load.apply: load took 446.704ms
[debug] Load.apply: resolveProjects took 0.0827ms
[debug] Load.apply: finalTransforms took 5.133ms
[debug] Load.apply: config.delegates took 0.191ms
[debug] Load.apply: Def.make(settings)... took 70.1198ms
[debug] Load.apply: structureIndex took 17.1171ms
[debug] Load.apply: mkStreams took 0.002ms
[info] set current project to Spark.Partitioner (in build file:/E:/Spark_Core_main/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(shell, None, None)
[error] server failed to start on local:sbt-server-cb78d90bead6482d1349. java.io.IOException: Could not create lock for \\.\pipe\sbt-server-cb78d90bead6482d1349_lock, error 5
