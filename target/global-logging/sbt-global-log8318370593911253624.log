[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\30778\AppData\Local\Temp\idea9.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\30778\AppData\Local\Temp\idea9.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.3 (Oracle Corporation Java 1.8.0_241)
[debug]       Load.loadUnit: plugins took 64.3338ms
[debug]       Load.loadUnit: defsScala took 0.1839ms
[debug] [Loading] Scanning directory C:\Users\30778\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\30778\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 17.0543 ms
[debug]           Load.resolveProject(global-plugins) took 29.8861ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\30778\.sbt\1.0\plugins, plugins: List(<none>))) took 68.0579ms
[debug] [Loading] Done in C:\Users\30778\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 80.5305ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1371ms
[debug]     Load.loadUnit(file:/C:/Users/30778/.sbt/1.0/plugins/, ...) took 150.1937ms
[debug]   Load.apply: load took 265.8849ms
[debug]   Load.apply: resolveProjects took 4.576ms
[debug]   Load.apply: finalTransforms took 58.0582ms
[debug]   Load.apply: config.delegates took 4.9109ms
[debug]   Load.apply: Def.make(settings)... took 870.6538ms
[debug]   Load.apply: structureIndex took 100.9661ms
[debug]   Load.apply: mkStreams took 1.8873ms
[info] loading global plugins from C:\Users\30778\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2456.5369ms
[debug]           Load.loadUnit: plugins took 10.981ms
[debug]           Load.loadUnit: defsScala took 0.002ms
[debug] [Loading] Scanning directory E:\Spark_Core_main\project
[debug]             Load.loadUnit: mkEval took 4.4892ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\Spark_Core_main\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.7767 ms
[info] loading settings for project spark_core_main-build from idea9.sbt ...
[debug]               Load.resolveProject(spark_core_main-build) took 1.9873ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark_core_main-build, base: E:\Spark_Core_main\project, plugins: List(<none>))) took 4.0595ms
[debug] [Loading] Done in E:\Spark_Core_main\project, returning: (spark_core_main-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 78.8404ms
[debug]           Load.loadUnit: cleanEvalClasses took 2.7006ms
[debug]         Load.loadUnit(file:/E:/Spark_Core_main/project/, ...) took 92.9706ms
[debug]       Load.apply: load took 94.455ms
[debug]       Load.apply: resolveProjects took 0.0766ms
[debug]       Load.apply: finalTransforms took 16.0078ms
[debug]       Load.apply: config.delegates took 6.2108ms
[debug]       Load.apply: Def.make(settings)... took 112.7889ms
[debug]       Load.apply: structureIndex took 12.2797ms
[debug]       Load.apply: mkStreams took 0.0026ms
[info] loading project definition from E:\Spark_Core_main\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 5791.1993ms
[debug]     Load.loadUnit: defsScala took 0.0017ms
[debug] [Loading] Scanning directory E:\Spark_Core_main
[debug]       Load.loadUnit: mkEval took 0.144ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\Spark_Core_main, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.2808 ms
[info] loading settings for project spark_core_main from build.sbt ...
[debug]         Load.resolveProject(spark_core_main) took 15.8331ms
[debug]       Load.loadTransitive: finalizeProject(Project(id spark_core_main, base: E:\Spark_Core_main, plugins: List(<none>))) took 17.8847ms
[debug] [Loading] Done in E:\Spark_Core_main, returning: (spark_core_main)
[debug]     Load.loadUnit: loadedProjectsRaw took 66.378ms
[debug]     Load.loadUnit: cleanEvalClasses took 10.519ms
[debug]   Load.loadUnit(file:/E:/Spark_Core_main/, ...) took 5868.5171ms
[debug] Load.apply: load took 5869.4872ms
[debug] Load.apply: resolveProjects took 0.0675ms
[debug] Load.apply: finalTransforms took 15.656ms
[debug] Load.apply: config.delegates took 0.2255ms
[debug] Load.apply: Def.make(settings)... took 86.8908ms
[debug] Load.apply: structureIndex took 45.4625ms
[debug] Load.apply: mkStreams took 0.0024ms
[info] set current project to Spark.Partitioner (in build file:/E:/Spark_Core_main/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 65429 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 65429, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Spark.Partitioner (in build file:/E:/Spark_Core_main/)
[debug] > Exec(idea-shell, None, None)
